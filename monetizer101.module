<?php

/**
 * @file
 * Monetizer101 module file.
 */

// Store the HTML ID as a constant, as we need it for fragment linking.
define('MONETIZER101_FULL_RESULTS_HTML_ID', 'block-monetizer101-monetizer101-full');

require_once('monetizer101.blocks.inc');
require_once('monetizer101.flags.inc');

/**
 * Implements hook_menu().
 */
function monetizer101_menu() {
  $items['admin/config/system/monetizer101'] = array(
    'title' => 'Monetizer101',
    'description' => 'Set the configuration for Monetizer101 module',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('monetizer101_admin_settings'),
    'access arguments' => array('administer monetizer101 settings'),
    'file' => 'monetizer101.admin.inc',
  );

  return $items;
}

/**
 * Implements hook_permission().
 */
function monetizer101_permission() {
  return array(
    'administer monetizer101 settings' => array(
      'title' => t('Administer monetizer101 settings'),
      'description' => t('Administer monetizer101 settings.'),
    ),
    'edit monetizer101 block widget' => array(
      'title' => t('Edit monetizer101 block widget'),
      'description' => t('Edit monetizer101 block widget.'),
    ),
  );
}

/**
 * Implements hook_theme().
 */
function monetizer101_theme($existing, $type, $theme, $path) {
  $theme = array(
    'monetizer101_widget' => array(
      'variables' => array(
        'data_config' => array(),
        'data_template' => '',
        'data_title' => '',
        'widget_name' => '',
      ),
    ),
  );

  return $theme;
}

/**
 * Theme callback for creating an m101 widget.
 */
function theme_monetizer101_widget($vars) {
  $attributes = array(
    'data-type' => 'price-comparison',
    'data-config' => json_encode($vars['data_config']),
  );
  // Add template if specified.
  if (!empty($vars['data_template'])) {
    $attributes['data-template'] = $vars['data_template'];
  }
  // Add title if specified.
  if (!empty($vars['data_title'])) {
    $attributes['data-title'] = $vars['data_title'];
  }
  $output = '<div id="' . drupal_html_id($vars['widget_name']) . '"' . drupal_attributes($attributes) . '></div>';

  return $output;
}

/**
 * Add the inline js to the footer of the page.
 *
 * @param boolean $global_js_override
 *   The version of JS to use.
 */
function monetizer101_add_js() {
  $data = array(
    'shopId' => variable_get('monetizer101_shop_id'),
    'isoCurrencyCode' => variable_get('monetizer101_currency_code', 'GBP'),
    'isoLanguageCode' => variable_get('monetizer101_language_code', 'en'),
    'geolocation' => variable_get('monetizer101_geolocation', TRUE),
  );
  if (!empty(variable_get('monetizer101_domain'))) {
    $data['domain'] = variable_get('monetizer101_domain');
  }
  else {
    $block_template_variable = variable_get('monetizer101_current_block', 'monetizer101_full') . '_template';
    $data['priceComparison'] = array('template' => variable_get($block_template_variable, ''));
  }
  $data = json_encode($data);
  $url = json_encode(variable_get('monetizer101_js_url'));

  // If domain is not empty.
  if (!empty(variable_get('monetizer101_domain'))) {
    if (variable_get('monetizer101_use_require', FALSE)) {
      // Use RequireJS if enabled.
      $js = "require([$url], function (e) {
      new e.PriceComparison($data);
    });";
    }
    else {
      $js = "(function () {
        var s = document.createElement('script');
        s.type = 'text/javascript';
        s.async = true;
        s.src = $url;
        s.onload = function () {
          new PriceComparison($data);
        };
        var x = document.getElementsByTagName('script')[0];
        x.parentNode.insertBefore(s, x);
      })();";
    }
  }
  // If domain is empty.
  else {
    $js = "require([$url], function () {
      m101.init($data);
    });";
  }

  $options = array(
    'scope' => 'footer',
    'type' => 'inline',
    'group' => JS_DEFAULT
  );

  drupal_add_js($js, $options);
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function monetizer101_form_node_type_form_alter(&$form, $form_state) {
  if (isset($form['type'])) {
    $content_type = $form['#node_type']->type;
    $options = _monetizer101_get_content_type_fields($content_type);
    // Node type edit form.
    $form['monetizer101'] = array(
      '#title' => t('Monetizer 101'),
      '#type' => 'fieldset',
      '#group' => 'additional_settings',
      '#tree' => FALSE,
    );
    $form['monetizer101']['product_name'] = array(
      '#type' => 'select',
      '#title' => t('Product Name'),
      '#options' => $options,
      '#default_value' => variable_get('monetizer101_product_name_field_' . $content_type),
      '#description' => t('Select product name field to use in monetizer api'),
    );
    $form['monetizer101']['product_price'] = array(
      '#type' => 'select',
      '#title' => t('Price'),
      '#options' => $options,
      '#default_value' => variable_get('monetizer101_price_field_' . $content_type),
      '#description' => t('Select price field to use in monetizer api'),
    );
    $form['#submit'][] = 'monetizer101_node_type_callback';
  }
}

/**
 * Custom handler to save monetizer setting form info.
 */
function monetizer101_node_type_callback(&$form, &$form_state) {
  $content_type = $form['#node_type']->type;

  $extra_fields_product_name = 'monetizer101_product_name_field_' . $content_type;
  $product_value = $form_state['complete form']['monetizer101']['product_name']['#value'];

  $extra_fields_product_price = 'monetizer101_price_field_' . $content_type;
  $product_price_value = $form_state['complete form']['monetizer101']['product_price']['#value'];

  // Set the variable for this node type.
  variable_set($extra_fields_product_name, $product_value);
  variable_set($extra_fields_product_price, $product_price_value);

  // Clear cache.
  field_info_cache_clear();
}

/**
 * Helper to get all field instances of a content type
 */
function _monetizer101_get_content_type_fields($content_type) {
  $fields = array_keys(field_info_instances('node', $content_type));
  $result = array_combine($fields, $fields);

  return $result;
}

/**
 * Implements hook_field_extra_fields().
 *
 * These need to be a field so that it can be embedded within a node.
 */
function monetizer101_field_extra_fields() {
  $extra = array();

  foreach (node_type_get_types() as $node) {
    if (variable_get('monetizer101_product_name_field_' . $node->type, 0)
      && variable_get('monetizer101_price_field_' . $node->type, 0)
    ) {

      $extra['node'][$node->type] = array(
        'display' => array(
          'monetizer101_summary' => array(
            'label' => t('Monetizer101 Results Summary'),
            'description' => t('Displays the top @count results, and a link to the full result set.', array(
              '@count' => variable_get('monetizer101_summary_limit', 4)
            )),
            'weight' => 0,
          ),
          'monetizer101_best_deals_link' => array(
            'label' => t('Monetizer101 Best Deals Link'),
            'description' => t('Displays a "Best Deals" link to monetizer101 full results.'),
            'weight' => 0,
          ),
        ),
      );
      // hide field by default
      $fields = array(
        'monetizer101_product_name_field_' . $node->type,
        'monetizer101_price_field_' . $node->type,
      );
      foreach ($fields as $field) {
        _monetizer101_hide_new_extra_field('node', $node->type, $field);
      }
    }
  }

  return $extra;
}

/**
 * Utility function to hide any newly created extra_fields.
 *
 * @param string $entity_type
 *   Entity type on which the new extra field will reside.
 * @param string $bundle
 *   Bundle on which the new extra field will reside.
 * @param string $field_name
 *   Machine name of extra field.
 *
 * @see https://api.drupal.org/comment/60167#comment-60167
 */
function _monetizer101_hide_new_extra_field($entity_type, $bundle, $field_name) {
  $settings = field_bundle_settings($entity_type, $bundle);
  $settings_updated = FALSE;
  $entity_info = entity_get_info($entity_type, $bundle);
  $view_modes = array_keys($entity_info['view modes']);
  if (!in_array('default', $view_modes)) {
    $view_modes[] = 'default';
  }
  foreach ($view_modes as $view_mode) {
    if (!isset($settings['extra_fields']['display'][$field_name][$view_mode])) {
      $settings_updated = TRUE;
      $settings['extra_fields']['display'][$field_name][$view_mode] = array(
        'visible' => FALSE,
        'weight' => 0,
      );
    }
  }
  if ($settings_updated) {
    field_bundle_settings($entity_type, $bundle, $settings);
  }
}

/**
 * Implements hook_page_alter().
 *
 * @param $variables
 */
function monetizer101_page_alter(&$page) {
  if (path_is_admin(current_path())) {
    return;
  }

  monetizer101_add_js();
}

/**
 * Implements hook_node_view().
 *
 * Fill in contents for the monetizer101_summary() and
 * monetizer101_best_deals_link extra fields.
 */
function monetizer101_node_view($node, $view_mode, $langcode) {
  if (variable_get('monetizer101_product_name_field_' . $node->type, 0) && $view_mode == 'full') {

    // Only show summary on first page (if pagination is enabled).
    $show_summary = TRUE;
    if (module_exists('multipage_navigation')) {
      $pagination = multipage_navigation_get_pagination($node);
      if (isset($pagination->current_page_number) && $pagination->current_page_number > 1) {
        $show_summary = FALSE;
      }
    }

    // Hide m101_summary widgets if the disable_monetizer flag is active on the current node.
    $disable_mod_widgets = flag_get_flag('disable_monetizer_widgets')->is_flagged($node->nid);
    // Don't add any monetizer content to the node if flagged (DD-289).
    if ($disable_mod_widgets == TRUE) {
      return;
    }

    if ($show_summary) {
      $block = monetizer101_block_view('monetizer101_summary');
      $node->content['monetizer101_summary'] = $block['content'];
    }

    $best_deals_link = monetizer101_generate_full_link(t('Best Deals'));
    $node->content['monetizer101_best_deals_link'] = array(
      '#markup' => $best_deals_link,
    );
  }
}

/**
 * Generate a config array that will be used for a m101 search widget.
 *
 * @param object $node
 *   The node object to use to generate the config.
 * @param string $block_name
 *   The name of the block.
 *
 * @return array|bool
 *   Either the generated config, or FALSE if config is unavailable
 *   (e.g. missing field values).  If FALSE you should avoid generating the
 *   widget.
 */
function monetizer101_get_widget_data($node, $block_name) {
  $data = array();

  $product_name_field = variable_get('monetizer101_product_name_field_' . $node->type, '');
  $price_field = variable_get('monetizer101_price_field_' . $node->type, '');
  if (empty($product_name_field) || empty($price_field)) {
    return FALSE;
  }

  $product_name_value = field_get_items('node', $node, $product_name_field);
  if (empty($product_name_value) || empty($product_name_value[0]['value'])) {
    return FALSE;
  }
  $data['nameKeywords'] = $product_name_value[0]['value'];

  $price_value = field_get_items('node', $node, $price_field);
  if (empty($price_value) || empty($price_value[0]['value'])) {
    return FALSE;
  }

  $data['price'] = $price_value[0]['value'];
  $data['delta'] = variable_get($block_name . '_price_range', '30');
  $data['priceType'] = 'RETAIL_PRICE';
  $data['templateId'] = variable_get($block_name . '_template_id', '');
  $data['sortingField'] = variable_get($block_name . '_sorting_field', 'PRICE');
  $data['sortingOrder'] = variable_get($block_name . '_sorting_order', 'asc');
  $data['merchantFilter'] = FALSE;
  $merchant_number = variable_get($block_name . '_merchant_number', '');
  if (!empty($merchant_number)) {
    $data['merchantFilter'] = TRUE;
    $data['merchantNumber'] = $merchant_number;
  }

  // The parameters below are required but not currently implemented (so we
  // leave them blank).
  $data['categoryIds'] = '';
  $data['merchantIds'] = '';
  $data['resultLimit'] = 1;

  return $data;
}

/**
 * Generate a link to the full m101 results on the current page.
 *
 * @param string $text
 *   The (translated) text that should appear in the link.
 *
 * @return string
 *   A string containing the HTML for the link.
 */
function monetizer101_generate_full_link($text) {
  return l($text, request_uri(), array(
    'fragment' => MONETIZER101_FULL_RESULTS_HTML_ID,
    'attributes' => array('class' => 'monetizer101-full-results-link')
  ));
}
