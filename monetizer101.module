<?php

/**
 * @file
 * Monetizer101 module file.
 */

// Store the HTML ID as a constant, as we need it for fragment linking.
define('MONETIZER101_FULL_RESULTS_HTML_ID', 'block-monetizer101-monetizer101-full');

/**
 * Implements hook_menu().
 */
function monetizer101_menu() {
  $items['admin/config/system/monetizer101'] = array(
    'title' => 'Monetizer101',
    'description' => 'Set the configuration for Monetizer101 module',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('monetizer101_admin_settings'),
    'access arguments' => array('administer monetizer101 settings'),
    'file' => 'monetizer101.admin.inc',
  );

  $items['admin/config/system/monetizer101/monetizer101-block'] = array(
    'title' => 'Monetizer101 Block',
    'description' => 'Add Monetizer101 script.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('monetizer101_admin_settings'),
    'access arguments' => array('edit monetizer101 block widget'),
    'file' => 'monetizer101.admin.block.inc',
  );

  return $items;
}

/**
 * Implements hook_permission().
 */
function monetizer101_permission() {
  return array(
    'administer monetizer101 settings' => array(
      'title' => t('Administer monetizer101 settings'),
      'description' => t('Administer monetizer101 settings.'),
    ),
    'edit monetizer101 block widget' => array(
      'title' => t('Edit monetizer101 block widget'),
      'description' => t('Edit monetizer101 block widget.'),
    ),
  );
}

/**
 * Implements hook_theme().
 */
function monetizer101_theme($existing, $type, $theme, $path) {
  return array(
    'monetizer101_widget' => array(
      'variables' => array(
        'config' => array(),
        'widget_name' => '',
      ),
    ),
  );
}

/**
 * Theme callback for creating an m101 widget.
 */
function theme_monetizer101_widget($vars) {
  // Use the widget name as the sid for now.
  $vars['config']['sid'] = $vars['widget_name'];
  $attibutes = array(
    'data-m101-type' => 'search-widget',
    'data-config' => drupal_json_encode($vars['config']),
  );
  return '<div id="' . drupal_html_id($vars['widget_name']) . '" ' . drupal_attributes($attibutes) . '></div>';

}

/**
 * Add the inline js to the footer of the page.
 */
function monetizer101_add_js() {
  static $done;
  if (!$done) {
    $done = TRUE;
    $js = '
    (function () {
        var u = "http://do.expertreviews.co.uk";
        var s = document.createElement("script");
        s.type = "text/javascript";
        s.async = true;
        s.src = u + "/widget/search-2.0.3/js/load.min.js";
        s.onload = function () {
            MONETIZER101SEARCH.init(u);
        };
        var x = document.getElementsByTagName("script")[0];
        x.parentNode.insertBefore(s, x);
    })();
    ';
    drupal_add_js($js, array('type' => 'inline', 'scope' => 'footer'));
  }

}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function monetizer101_form_node_type_form_alter(&$form, $form_state) {
  if (isset($form['type'])) {
    $content_type = $form['#node_type']->type;
    $options = _monetizer101_get_content_type_fields($content_type);
    // Node type edit form.
    $form['monetizer101'] = array(
      '#title' => t('Monetizer 101'),
      '#type' => 'fieldset',
      '#group' => 'additional_settings',
      '#tree' => FALSE,
    );
    $form['monetizer101']['product_name'] = array(
      '#type' => 'select',
      '#title' => t('Product Name'),
      '#options' => $options,
      '#default_value' => variable_get('monetizer101_product_name_field_' . $content_type),
      '#description' => t('Select product name field to use in monetizer api'),
    );
    $form['monetizer101']['product_price'] = array(
      '#type' => 'select',
      '#title' => t('Price'),
      '#options' => $options,
      '#default_value' => variable_get('monetizer101_price_field_' . $content_type),
      '#description' => t('Select price field to use in monetizer api'),
    );
    $form['#submit'][] = 'monetizer101_node_type_callback';
  }
}

/**
 * Custom handler to save monetizer setting form info.
 */
function monetizer101_node_type_callback(&$form, &$form_state) {
  $content_type = $form['#node_type']->type;

  $extra_fields_prodcut_name = 'monetizer101_product_name_field_' . $content_type;
  $product_value = $form_state['complete form']['monetizer101']['product_name']['#value'];

  $extra_fields_prodcut_price = 'monetizer101_price_field_' . $content_type;
  $product_price_value = $form_state['complete form']['monetizer101']['product_price']['#value'];

  // Set the variable for this node type.
  variable_set($extra_fields_prodcut_name, $product_value);
  variable_set($extra_fields_prodcut_price, $product_price_value);

  // Clear cache.
  field_info_cache_clear();
}

/**
 * Helper to get all field instances of a content type
 */
function _monetizer101_get_content_type_fields($content_type) {
  $fields = array_keys(field_info_instances('node', $content_type));
  $result = array_combine($fields, $fields);
  return $result;
}

/**
 * Implements hook_field_extra_fields().
 *
 * These need to be a field so that it can be embedded within a node.
 */
function monetizer101_field_extra_fields() {
  $extra = array();

  foreach (node_type_get_types() as $node) {
    if (variable_get('monetizer101_product_name_field_' . $node->type, 0)
      && variable_get('monetizer101_price_field_' . $node->type, 0)) {

      $extra['node'][$node->type] = array(
        'display' => array(
          'monetizer101_summary' => array(
            'label' => t('Monetizer101 Results Summary'),
            'description' => t('Displays the top @count results, and a link to the full result set.', array(
              '@count' => variable_get('monetizer101_summary_limit', 4)
            )),
            'weight' => 0,
          ),
          'monetizer101_best_deals_link' => array(
            'label' => t('Monetizer101 Best Deals Link'),
            'description' => t('Displays a "Best Deals" link to monetizer101 full results.'),
            'weight' => 0,
          ),
        ),
      );
      // hide field by default
      $fields = array(
        'monetizer101_product_name_field_' . $node->type,
        'monetizer101_price_field_' . $node->type,
      );
      foreach ($fields as $field) {
        _monetizer101_hide_new_extra_field('node', $node->type, $field);
      }
    }
  }
  return $extra;
}

/**
 * Utility function to hide any newly created extra_fields.
 *
 * @param string $entity_type
 *   Entity type on which the new extra field will reside.
 * @param string $bundle
 *   Bundle on which the new extra field will reside.
 * @param string $field_name
 *   Machine name of extra field.
 *
 * @see https://api.drupal.org/comment/60167#comment-60167
 */
function _monetizer101_hide_new_extra_field($entity_type, $bundle, $field_name) {
  $settings = field_bundle_settings($entity_type, $bundle);
  $settings_updated = FALSE;
  $entity_info = entity_get_info($entity_type, $bundle);
  $view_modes = array_keys($entity_info['view modes']);
  if (!in_array('default', $view_modes)) {
    $view_modes[] = 'default';
  }
  foreach ($view_modes as $view_mode) {
    if (!isset($settings['extra_fields']['display'][$field_name][$view_mode])) {
      $settings_updated = TRUE;
      $settings['extra_fields']['display'][$field_name][$view_mode] = array(
        'visible' => FALSE,
        'weight' => 0,
      );
    }
  }
  if ($settings_updated) {
    field_bundle_settings($entity_type, $bundle, $settings);
  }
}

/**
 * Implements hook_block_info().
 *
 * Full listing needs to be a block so it can be placed in a region.
 */
function monetizer101_block_info() {

  $blocks = _monetizer101_node_blocks();

  $blocks['monetizer101_block'] = array(
    'info' => t('Monetizer101 Block'),
    'cache' => DRUPAL_NO_CACHE,
  );
  return $blocks;
}

/**
 * Define blocks that should appear on node pages.
 *
 * @return array
 *   An array of blocks, compatible with hook_block_info().
 */
function _monetizer101_node_blocks() {
  $blocks['monetizer101_full'] = array(
    'info' => t('Monetizer101 Full'),
    'cache' => DRUPAL_NO_CACHE,
  );
  $blocks['monetizer101_summary'] = array(
    'info' => t('Monetizer101 Summary'),
    'cache' => DRUPAL_NO_CACHE,
  );
  $blocks['monetizer101_sticky'] = array(
    'info' => t('Monetizer101 Sticky'),
    'cache' => DRUPAL_NO_CACHE,
  );
  return $blocks;
}


/**
 * Implements hook_block_configure().
 */
function monetizer101_block_configure($delta = '') {
  $form = array();

  // Get all the blocks defined by this module.
  $blocks = _monetizer101_node_blocks();

  if (isset($blocks[$delta])) {
    $form = monetizer101_block_settings_form($delta);
  }

  return $form;
}

/**
 * Implements hook_block_save().
 */
function monetizer101_block_save($delta = '', $edit = array()) {
  // Get all the blocks defined by this module.
  $blocks = _monetizer101_node_blocks();

  if (isset($blocks[$delta])) {
    foreach ($edit as $name => $value) {
      // If the param name starts with the block name,
      // we know it's a m101 setting.
      if (strpos($name, $delta) === 0) {
        variable_set($name, $value);
      }
    }
  }
}

/**
 * Generate a m101 settings form for the block.
 *
 * @param string $block_name
 *   The name of the block.
 *
 * @return array
 *   The generated form array.
 */
function monetizer101_block_settings_form($block_name) {
  $form = array(
    'monetizer101_settings' => array(
      '#type' => 'fieldset',
      '#title' => t('Monetizer101 Settings'),
      $block_name . '_template_id' => array(
        '#type' => 'textfield',
        '#title' => t('Template ID'),
        '#default_value' => variable_get($block_name . '_template_id', ''),
      ),
      $block_name . '_price_range' => array(
        '#type' => 'textfield',
        '#title' => t('Price Range'),
        '#description' => t('Price range to fetch relevant result in percentage.  E.g. 30 is 30% (if price is £100 then range will be £70-£130).'),
        '#default_value' => variable_get($block_name . '_price_range', ''),
      ),
      $block_name . '_merchant_number' => array(
        '#type' => 'textfield',
        '#title' => t('Merchant number'),
        '#description' => t('The amount of results from each merchant to use. (Leave blank to show unlimited results from each merchant)'),
        '#default_value' => variable_get($block_name . '_merchant_number', ''),
      ),
      $block_name . '_sorting_field' => array(
        '#type' => 'textfield',
        '#title' => t('Field to use for sorting.'),
        '#description' => t('The amount of results from each merchant to use. (Leave blank to show unlimited results from each merchant)'),
        '#default_value' => variable_get($block_name . '_sorting_field', 'PRICE'),
      ),
      $block_name . '_sorting_order' => array(
        '#type' => 'select',
        '#title' => t('Sorting Order'),
        '#options' => array('asc' => t('Ascending'), 'desc' => t('Descending')),
        '#default_value' => variable_get($block_name . '_sorting_order', 'asc'),
      ),
    ),
  );
  return $form;
}

/**
 * Implements hook_block_view().
 */
function monetizer101_block_view($delta = '') {
  $block = array();

  $blocks = _monetizer101_node_blocks();

  if (isset($blocks[$delta])) {
    if (arg(0) == 'node' && is_numeric(arg(1))) {
      $node = node_load(arg(1));
      if ($node) {
        $config = monetizer101_get_widget_config($node, $delta);
        if ($config) {
          $block['content'] = array(
            '#theme' => 'monetizer101_widget',
            '#config' => $config,
            '#widget_name' => $delta,
          );
        }
      }
    }
  }
  switch ($delta) {
    case 'monetizer101_block':
      if (variable_get('monetizer101_block_enabled') == 0) {
        return;
      }
      $block['content'] = variable_get('monetizer101_script');
      break;
    case 'monetizer101_sticky':
      // Attach sticky JS to block.
      if ($config) {
        $block['content']['#attached']['js'][] =  drupal_get_path('module', 'monetizer101') . '/js/monetizer101Sticky.js';
      }
      break;
    default:
      break;
  }
  return $block;
}

/**
 * Implements hook_preprocess_page().
 * @param $variables
 */
function monetizer101_preprocess_page(&$variables) {
  // Add monetizer js to the page.
  monetizer101_add_js();
}

/**
 * Implements hook_node_view().
 *
 * Fill in contents for the monetizer101_summary() and
 * monetizer101_best_deals_link extra fields.
 */
function monetizer101_node_view($node, $view_mode, $langcode) {
  if (variable_get('monetizer101_product_name_field_' . $node->type, 0) && $view_mode == 'full') {

    $limit = variable_get('monetizer101_summary_limit', '4');
    $config = monetizer101_get_widget_config($node, $limit);

    if (!$config) {
      return;
    }

    // Only show summary on first page (if pagination is enabled).
    $show_summary = TRUE;
    if (module_exists('multipage_navigation')) {
      $pagination = multipage_navigation_get_pagination($node);
      if (isset($pagination->current_page_number) && $pagination->current_page_number > 1) {
        $show_summary = FALSE;
      }
    }

    if ($show_summary) {
      $block = monetizer101_block_view('monetizer101_summary');
      $node->content['monetizer101_summary'] = $block['content'];
    }

    $best_deals_link = monetizer101_generate_full_link(t('Best Deals'));
    $node->content['monetizer101_best_deals_link'] = array(
      '#markup' => $best_deals_link,
    );
  }
}

/**
 * Generate a config array that will be used for a m101 search widget.
 *
 * @param object $node
 *   The node object to use to generate the config.
 * @param string $block_name
 *   The name of the block.
 *
 * @return array|bool
 *   Either the generated config, or FALSE if config is unavailable
 *   (e.g. missing field values).  If FALSE you should avoid generating the
 *   widget.
 */
function monetizer101_get_widget_config($node, $block_name) {
  $config = array();

  $product_name_field = variable_get('monetizer101_product_name_field_' . $node->type, '');
  $price_field = variable_get('monetizer101_price_field_' . $node->type, '');
  if (empty($product_name_field) || empty($price_field)) {
    return FALSE;
  }

  $product_name_value = field_get_items('node', $node, $product_name_field);
  if (empty($product_name_value) || empty($product_name_value[0]['value'])) {
    return FALSE;
  }
  $config['nameKeywords'] = $product_name_value[0]['value'];

  $price_value = field_get_items('node', $node, $price_field);
  if (empty($price_value) || empty($price_value[0]['value'])) {
    return FALSE;
  }

  $config['price'] = $price_value[0]['value'];
  $config['delta'] = variable_get($block_name . '_price_range', '30');
  // Use retail price to retrieve more accurate results.
  $config['priceType'] = 'RETAIL_PRICE';

  $config['shopId'] = variable_get('monetizer101_shop_id', '');
  $config['isoCurrencyCode'] = variable_get('monetizer101_currency_code', '');
  $config['isoLanguageCode'] = variable_get('monetizer101_language_code', 'en');
  $config['geolocation'] = (bool) variable_get('monetizer101_geolocation', TRUE);
  $config['templateId'] = variable_get($block_name . '_template_id', '');
  $config['sortingField'] = variable_get($block_name . '_sorting_field', 'PRICE');
  $config['sortingOrder'] = variable_get($block_name . '_sorting_order', 'asc');

  $config['merchantFilter'] = FALSE;

  $merchant_number = variable_get($block_name . '_merchant_number', '');
  if (!empty($merchant_number)) {
    $config['merchantFilter'] = TRUE;
    $config['merchantNumber'] = $merchant_number;
  }

  // The parameters below are required but not currently implemented (so we
  // leave them blank).
  $config['categoryIds'] = '';
  $config['merchantIds'] = '';

  $config['sid'] = '';

  return $config;

}

/**
 * Generate a link to the full m101 results on the current page.
 *
 * @param string $text
 *   The (translated) text that should appear in the link.
 *
 * @return string
 *   A string containing the HTML for the link.
 */
function monetizer101_generate_full_link($text) {
  return l($text, request_uri(), array('fragment' => MONETIZER101_FULL_RESULTS_HTML_ID, 'attibutes' => array('class' => 'monetizer101-full-results-link')));
}
